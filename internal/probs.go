/*
probs - Package containing the logic for solving Euler problems.
This package contains the functions to solve the problems and return the results.

Author: Matthew Sunner, 2025
*/

package probs

func Sum(intSlice []int) int {
	sum := 0
	for _, v := range intSlice {
		sum += v
	}
	return sum
}

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
// The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.
//
// https://projecteuler.net/problem=1

func ProbOne(countOf int, maxOf int) int {
	solutionsList := make([]int, 0, countOf)

	for i := 0; i < maxOf; i++ {
		if i%3 == 0 || i%5 == 0 {
			solutionsList = append(solutionsList, i)
		}
	}

	if len(solutionsList) == 0 {
		return 0
	}

	return Sum(solutionsList)

	// Answer: 233,168
}

// Euler Project - Problem Two
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
//
// https://projecteuler.net/problem=2
func ProbTwo(limit int) int {
	a, b := 1, 2

	var fibList []int
	var sumList []int

	for a < limit {
		fibList = append(fibList, a)
		a, b = b, a+b
	}

	for _, i := range fibList {
		if i%2 == 0 {
			sumList = append(sumList, i)
		}
	}

	return Sum(sumList)

	// Answer: 4,613,732
}
